shiny::runApp()
# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.
library(dplyr)
library(echarts4r)
library(htmlwidgets)
library(reactable)
library(rhino)
library(tidyr)
library(shinyWidgets)
packages_to_install <- c(
"dplyr", "echarts4r", "htmlwidgets", "reactable", "rhino",
"tidyr", "shinyWidgets", "plotly", "glue", "bslib",
"shinycssloaders", "DT", "upsetjs", "tidyverse", "DT",
"upsetjs", "clusterProfiler", "ReactomePA", "rrvgo"
)
# Install packages if not already installed
install_if_missing <- function(pkg) {
if (!(pkg %in% installed.packages()[,"Package"])) {
install.packages(pkg, dependencies = TRUE)
}
}
invisible(sapply(packages_to_install, install_if_missing))
renv::snapshot()
# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.
library(dplyr)
library(echarts4r)
library(htmlwidgets)
library(reactable)
library(rhino)
library(tidyr)
library(shinyWidgets)
library(plotly)
library(glue)
library(bslib)
library(stats)
library(shinycssloaders)
library(DT)
library(upsetjs)
library(tidyverse)
library(DT)
library(upsetjs)
library(clusterProfiler)
?clusterProfiler
??clusterProfiler
# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.
library(dplyr)
library(echarts4r)
library(htmlwidgets)
library(reactable)
library(rhino)
library(tidyr)
library(shinyWidgets)
library(plotly)
library(glue)
library(bslib)
library(stats)
library(shinycssloaders)
library(DT)
library(upsetjs)
library(tidyverse)
library(DT)
library(upsetjs)
library(ReactomePA)
runApp()
install.packages("clusterProfiler")
BiocManager::install("clusterProfiler")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("clusterProfiler")
runApp()
BiocManager::install("rrvgo")
runApp()
renv::snapshot()
BiocManager::install("ReactomePA")
renv::snapshot()
BiocManager::install("clusterProfiler")
renv::snapshot()
library(clusterProfiler)
renv::snapshot()
deployApp()
library(rsconnect)
deployApp()
deployApp()
library(rsconnect)
# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.
library(dplyr)
library(echarts4r)
library(htmlwidgets)
library(reactable)
library(rhino)
library(tidyr)
library(shinyWidgets)
library(plotly)
library(glue)
library(bslib)
library(stats)
library(shinycssloaders)
library(DT)
library(upsetjs)
library(tidyverse)
library(DT)
library(upsetjs)
library(ReactomePA)
library(rrvgo)
library(clusterProfiler)
library(rsconnect)
deployApp()
?clusterProfiler
library(clusterProfiler)
renv::snapshot()
getwd()
BiocManager::install("clusterProfiler")
library(clusterProfiler)
renv::snapshot()
shiny::runApp()
deployApp()
?mapData
??mapData
runApp()
deployApp(appName = "shiny_genesetexplore")
runApp()
runApp()
runApp()
runApp()
deployApp(appName = "shiny_genesetexplore")
x <- readRDS("./rda/semantic_analysis_tables_bp.rda")
View(x)
runApp()
getwd
getwd()
linear_SCVI_none_celltype <- read.delim("../../../../Downloads/huangfu_all_linear_SCVI_None_celltype_loadings.txt")
linear_SCVI_none_genotype <- read.delim("../../../../Downloads/huangfu_all_linear_SCVI_None_genotype_loadings.txt")
View(linear_SCVI_none_celltype)
View(linear_SCVI_none_genotype)
main.annotated.data.frame <- readRDS('./rda/main.annotated.data.frame.rda')
View(main.annotated.data.frame)
getwd()
# Assuming 'main.annotated.data.frame' is your data frame
original_gene_list <- main.annotated.data.frame$gene_symbol
# Set a seed for reproducibility
set.seed(123)
# Number of samples to generate
num_samples <- 250
# Directory to save the files
output_directory <- "/Users/gabrielm/Desktop/gene_lists_for_app_demo"
# Create the output directory if it doesn't exist
if (!file.exists(output_directory)) {
dir.create(output_directory)
}
# Generate and write random samples to TSV files
for (i in 1:num_samples) {
# Randomly sample the gene list
sampled_genes <- sample(original_gene_list, size = length(original_gene_list), replace = TRUE)
# Create a data frame
sample_df <- data.frame(Gene_Symbol = sampled_genes)
# Construct the file name
file_name <- paste0(output_directory, "/gene_list_sample_", i, ".tsv")
# Write the data frame to a TSV file
write.table(sample_df, file = file_name, sep = "\t", row.names = FALSE)
cat("Sample", i, "written to", file_name, "\n")
}
# Assuming 'main.annotated.data.frame' is your data frame
original_gene_list <- main.annotated.data.frame$gene_symbol
# Set a seed for reproducibility
set.seed(123)
# Number of samples to generate
num_samples <- 5
# Directory to save the files
output_directory <- "/Users/gabrielm/Desktop/gene_lists_for_app_demo"
# Create the output directory if it doesn't exist
if (!file.exists(output_directory)) {
dir.create(output_directory)
}
# Generate and write random samples to TSV files
for (i in 1:num_samples) {
# Randomly sample the gene list
sampled_genes <- sample(original_gene_list, size = 250, replace = TRUE)
# Create a data frame
sample_df <- data.frame(Gene_Symbol = sampled_genes)
# Construct the file name
file_name <- paste0(output_directory, "/gene_list_sample_", i, ".tsv")
# Write the data frame to a TSV file
write.table(sample_df, file = file_name, sep = "\t", row.names = FALSE)
cat("Sample", i, "written to", file_name, "\n")
}
