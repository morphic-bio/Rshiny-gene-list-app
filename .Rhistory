top_x_percent_terms <- nrow(reducedTerms)/x
# Generate plot
scat_p <- rrvgo::scatterPlot(simMatrix, reducedTerms[1:top_x_percent_terms, ], algorithm = c("pca"), onlyParents = FALSE)
# Add labels for top 5 most enriched GO terms
x <- stats::cmdscale(as.matrix(as.dist(1-simMatrix), eig=TRUE, k=2))
df <- cbind(as.data.frame(x),
reducedTerms[match(rownames(x), reducedTerms$go), c("term", "parent", "parentTerm", "size")])
# Only show top 5 most significantly enriched terms
p <- scat_p + geom_text(aes(label=parentTerm), data=subset(df[1:5,], parent == rownames(df[1:5,])), size=4, color="black")
return(list(p, go_analysis2))
# return(p)
}
dpc_lists <- readRDS('./data/morphic_gene_lists2024-07-25.rda')
gene_list_table <- read.fst('./data/morphic_gene_list_table_2024-07-25.fst')
gene_lists <- list(
'JAX' =
list(
'gene_list' = dpc_lists$JAX
),
'MSK' =
list(
'gene_list' = dpc_lists$MSK
),
'NWU' =
list(
'gene_list' = dpc_lists$NWU
),
'UCSF' =
list(
'gene_list' = dpc_lists$UCSF
),
'All MorPhiC genes' =
list(
'gene_list' = unique(c(dpc_lists$JAX, dpc_lists$MSK, dpc_lists$NWU, dpc_lists$UCSF))
)
)
# Run GO analysis
ontologies <- c('BP', 'MF', 'CC', 'ALL')
results <- list()
# Initialize the results list with ontologies
for (ont in ontologies) {
results[[ont]] <- list()
}
# Fill in the results list with GO analysis results
for (ont in ontologies[1:2]) {
for (i in seq_along(gene_lists)) {
gene_list_name <- names(gene_lists)[i] # Assuming gene_lists is a named list
result <- goAnalysis(
gene_list = gene_lists[[i]][['gene_list']],
background = unique(gene_list_table$gene_symbol),
ontology = ont,
pval = 0.01,
qval = 0.05,
percent_slice = 25,
threshold = 0.7
)
results[[ont]][[gene_list_name]] <- result
}
}
head(results$BP$JAX[[2]]@result)
# results$MF$MSK[[1]]
# results$MF$NWU[[1]]
# results$MF$UCSF[[1]]
# results$MF$`All MorPhiC genes`[[1]]
#
# results$CC$JAX[[1]]
# results$CC$MSK[[1]]
# results$CC$NWU[[1]]
# results$CC$UCSF[[1]]
# results$CC$`All MorPhiC genes`[[1]]
saveRDS(results[1:2], './data/go_plots.rda')
reactomeAnalysis <- function(gene_list, background, pval, no_pathways_shown) {
# Enrichment
enriched_pathway <- background %>%
dplyr::filter(gene_symbol %in% gene_list) %>%
dplyr::pull(entrez_id) %>%
ReactomePA::enrichPathway(gene = ., pvalueCutoff = pval, readable = TRUE)
# Table
enriched_pathway_table <- data.frame(enriched_pathway, row.names = NULL) %>%
dplyr::select(ID, Description, qvalue) %>%
mutate(across(where(is.numeric), ~ signif(.x, 3)))
# Plots
edo <- enrichplot::pairwise_termsim(enriched_pathway)
plot <- enrichplot::emapplot(edo, showCategory = no_pathways_shown)
return(list(plot, enriched_pathway_table))
}
protein.coding.genes <- read.delim(
"https://ftp.ebi.ac.uk/pub/databases/genenames/hgnc/tsv/locus_types/gene_with_protein_product.txt"
) %>%
dplyr::rename(gene_symbol = symbol)
pathway_results <- list()
for (i in seq_along(gene_lists)) {
gene_list_name <- names(gene_lists)[i] # Assuming gene_lists is a named list
result <- reactomeAnalysis(
gene_list = gene_lists[[i]][['gene_list']],
background = protein.coding.genes,
pval = 0.05,
no_pathways_shown = 10
)
pathway_results[[gene_list_name]] <- result
}
pathway_results$JAX
# pathway_results$JAX
# pathway_results$MSK
# pathway_results$NWU
# pathway_results$UCSF
# pathway_results$`All MorPhiC genes`
saveRDS(pathway_results, './data/pathway_plots.rda')
runApp()
data1 <- read.fst('./data/hca_expression_table.fst')
gene_lists <- list(
'l1' = gene_list_table$gene_symbol[1:100],
'l2' = gene_list_table$gene_symbol[1000:1100],
'l3' = gene_list_table$gene_symbol[10000:10100]
)
getTopTenPlot <- function(data, gene_lists, data_col, title) {
names <- names(gene_lists)
all_data_list <- list()
for (i in names) {
gene_list_name <- i
all_data_list <- append(
all_data_list,
list(
list(
data %>%
dplyr::filter(!is.na(!! sym(data_col))) %>%
dplyr::filter(gene_symbol %in% gene_lists[[i]][['gene_list']]) %>%
dplyr::select(!! sym(data_col), gene_symbol) %>%
dplyr::distinct() %>%
dplyr::group_by(!! sym(data_col)) %>%
dplyr::tally() %>%
dplyr::arrange(desc(n)) %>%
dplyr::slice_head(n = 10),
gene_list_name
)
)
)
}
plot_list <- list()
for (i in all_data_list) {
p <- i[[1]] %>%
plot_ly(
type = 'bar',
# x = ~reorder(CLASS_TERM, n),
x = as.formula(paste("~", data_col)),
y = ~n,
name = i[[2]]
)
plot_list <- append(plot_list, list(p))
}
subplots <- subplot(plot_list) %>%
layout(
title = title
)
return(subplots)
}
getTopTenPlot(data1, gene_lists, 'tissue', 'this is a title')
gene_lists
gene_lists <- list(
'JAX' =
list(
'gene_list' = dpc_lists$JAX
),
'MSK' =
list(
'gene_list' = dpc_lists$MSK
),
'NWU' =
list(
'gene_list' = dpc_lists$NWU
),
'UCSF' =
list(
'gene_list' = dpc_lists$UCSF
),
'All MorPhiC genes' =
list(
'gene_list' = unique(c(dpc_lists$JAX, dpc_lists$MSK, dpc_lists$NWU, dpc_lists$UCSF))
)
)
getTopTenPlot(data1, gene_lists, 'tissue', 'this is a title')
t <- data1 %>%
dplyr::filter(!is.na('tissue')) %>%
dplyr::filter(gene_symbol %in% gene_lists[[1]][['gene_list']]) %>%
dplyr::select('tissue', gene_symbol) %>%
dplyr::distinct() %>%
dplyr::group_by('tissue') %>%
dplyr::tally() %>%
dplyr::arrange(desc(n)) %>%
dplyr::slice_head(n = 10)
t
View(data1)
gene_lists[[1]][['gene_list']]
t <- data1 %>%
dplyr::filter(!is.na(tissue)) %>%
dplyr::filter(gene_symbol %in% gene_lists[[1]][['gene_list']]) %>%
dplyr::select(tissue, gene_symbol) %>%
dplyr::distinct() %>%
dplyr::group_by(tissue) %>%
dplyr::tally() %>%
dplyr::arrange(desc(n)) %>%
dplyr::slice_head(n = 10)
t
p <- t  %>%
plot_ly(
type = 'bar',
# x = ~reorder(CLASS_TERM, n),
x = as.formula(paste("~", data_col)),
y = ~n,
name = i[[2]]
)
p <- t  %>%
plot_ly(
type = 'bar',
# x = ~reorder(CLASS_TERM, n),
x = as.formula(paste("~", 'tissue')),
y = ~n,
name = i[[2]]
)
p <- t  %>%
plot_ly(
type = 'bar',
# x = ~reorder(CLASS_TERM, n),
x = as.formula(paste("~", 'tissue')),
y = ~n,
name = 'whatever'
)
p
t <- data1 %>%
dplyr::filter(!is.na(tissue)) %>%
dplyr::filter(gene_symbol %in% gene_lists[[1]][['gene_list']]) %>%
dplyr::select(tissue, gene_symbol) %>%
dplyr::distinct() %>%
dplyr::group_by(tissue) %>%
dplyr::tally() %>%
dplyr::arrange(desc(n)) %>%
dplyr::slice_head(n = 10)
t
p <- t  %>%
plot_ly(
type = 'bar',
# x = ~reorder(CLASS_TERM, n),
x = as.formula(paste("~", 'tissue')),
y = ~n,
name = 'whatever'
)
p
t <- t %>% mutate(tissue = as.character(tissue))
p <- t  %>%
plot_ly(
type = 'bar',
# x = ~reorder(CLASS_TERM, n),
x = as.formula(paste("~", 'tissue')),
y = ~n,
name = 'whatever'
)
p
getTopTenPlot <- function(data, gene_lists, data_col, title) {
names <- names(gene_lists)
all_data_list <- list()
for (i in names) {
gene_list_name <- i
all_data_list <- append(
all_data_list,
list(
list(
data %>%
dplyr::filter(!is.na(!! sym(data_col))) %>%
dplyr::filter(gene_symbol %in% gene_lists[[i]][['gene_list']]) %>%
dplyr::select(!! sym(data_col), gene_symbol) %>%
dplyr::distinct() %>%
dplyr::group_by(!! sym(data_col)) %>%
dplyr::tally() %>%
dplyr::arrange(desc(n)) %>%
dplyr::slice_head(n = 10) %>%
mutate(tissue = as.character(tissue)),
gene_list_name
)
)
)
}
plot_list <- list()
for (i in all_data_list) {
p <- i[[1]] %>%
plot_ly(
type = 'bar',
# x = ~reorder(CLASS_TERM, n),
x = as.formula(paste("~", data_col)),
y = ~n,
name = i[[2]]
)
plot_list <- append(plot_list, list(p))
}
subplots <- subplot(plot_list) %>%
layout(
title = title
)
return(subplots)
}
getTopTenPlot(data1, gene_lists, 'tissue', 'this is a title')
getTopTenPlot2 <- function(data, gene_lists, data_col, title) {
names <- names(gene_lists)
all_data_list <- list()
all_tissues <- character()  # To store all unique tissue names
for (i in names) {
gene_list_name <- i
gene_list_data <- data %>%
dplyr::filter(!is.na(!!sym(data_col))) %>%
dplyr::filter(gene_symbol %in% gene_lists[[i]][['gene_list']]) %>%
dplyr::select(!!sym(data_col), gene_symbol) %>%
dplyr::distinct() %>%
dplyr::group_by(!!sym(data_col)) %>%
dplyr::tally() %>%
dplyr::arrange(desc(n)) %>%
dplyr::slice_head(n = 10) %>%
mutate(tissue = as.character(tissue))
all_tissues <- unique(c(all_tissues, gene_list_data$tissue))
all_data_list <- append(
all_data_list,
list(
list(
gene_list_data,
gene_list_name
)
)
)
}
plot_list <- list()
for (i in all_data_list) {
p <- i[[1]] %>%
plot_ly(
type = 'bar',
x = ~tissue,
y = ~n,
name = i[[2]]
) %>%
layout(
xaxis = list(categoryorder = "array", categoryarray = all_tissues)
)
plot_list <- append(plot_list, list(p))
}
subplots <- subplot(plot_list) %>%
layout(
title = title
)
return(subplots)
}
getTopTenPlotw(data1, gene_lists, 'tissue', 'this is a title')
getTopTenPlot2(data1, gene_lists, 'tissue', 'this is a title')
getTopTenPlot(data1, gene_lists, 'tissue', 'this is a title')
runApp()
runApp()
runApp()
runApp()
panther_df <- read.fst('./data/panther_protein_table.fst')
names(panther_df)
runApp()
names(panther_df)
runApp()
getTopTenPlot(data1, gene_lists, 'SUBFAMILY_TERM', 'this is a title')
data2 <- read.fst('./data/panther_protein_table.fst')
getTopTenPlot(data2, gene_lists, 'SUBFAMILY_TERM', 'this is a title')
getTopTenPlot <- function(data, gene_lists, data_col, title) {
names <- names(gene_lists)
all_data_list <- list()
for (i in names) {
gene_list_name <- i
all_data_list <- append(
all_data_list,
list(
list(
data %>%
dplyr::filter(!is.na(!! sym(data_col))) %>%
dplyr::filter(gene_symbol %in% gene_lists[[i]][['gene_list']]) %>%
dplyr::select(!! sym(data_col), gene_symbol) %>%
dplyr::distinct() %>%
dplyr::group_by(!! sym(data_col)) %>%
dplyr::tally() %>%
dplyr::arrange(desc(n)) %>%
dplyr::slice_head(n = 10) %>%
mutate(!! sym(data_col) := as.character(!! sym(data_col))),
gene_list_name
)
)
)
}
plot_list <- list()
for (i in all_data_list) {
p <- i[[1]] %>%
plot_ly(
type = 'bar',
# x = ~reorder(CLASS_TERM, n),
x = as.formula(paste("~", data_col)),
y = ~n,
name = i[[2]]
)
plot_list <- append(plot_list, list(p))
}
subplots <- subplot(plot_list) %>%
layout(
title = title
)
return(subplots)
}
# #
# t <- data1 %>%
#   dplyr::filter(!is.na(tissue)) %>%
#   dplyr::filter(gene_symbol %in% gene_lists[[1]][['gene_list']]) %>%
#   dplyr::select(tissue, gene_symbol) %>%
#   dplyr::distinct() %>%
#   dplyr::group_by(tissue) %>%
#   dplyr::tally() %>%
#   dplyr::arrange(desc(n)) %>%
#   dplyr::slice_head(n = 10)
# t
# t <- t %>% mutate(tissue = as.character(tissue))
# p <- t  %>%
#   plot_ly(
#     type = 'bar',
#     # x = ~reorder(CLASS_TERM, n),
#     x = as.formula(paste("~", 'tissue')),
#     y = ~n,
#     name = 'whatever'
#   )
# p
# #
data2 <- read.fst('./data/panther_protein_table.fst')
getTopTenPlot(data2, gene_lists, 'SUBFAMILY_TERM', 'this is a title')
getTopTenPlot <- function(data, gene_lists, data_col, title) {
names <- names(gene_lists)
all_data_list <- list()
for (i in names) {
gene_list_name <- i
all_data_list <- append(
all_data_list,
list(
list(
data %>%
dplyr::filter(!is.na(!! sym(data_col))) %>%
dplyr::filter(gene_symbol %in% gene_lists[[i]][['gene_list']]) %>%
dplyr::select(!! sym(data_col), gene_symbol) %>%
dplyr::distinct() %>%
dplyr::group_by(!! sym(data_col)) %>%
dplyr::tally() %>%
dplyr::arrange(desc(n)) %>%
dplyr::slice_head(n = 10) %>%
mutate(!! sym(data_col) := as.character(!! sym(data_col))),
gene_list_name
)
)
)
}
print(all_data_list)
plot_list <- list()
for (i in all_data_list) {
p <- i[[1]] %>%
plot_ly(
type = 'bar',
# x = ~reorder(CLASS_TERM, n),
x = as.formula(paste("~", data_col)),
y = ~n,
name = i[[2]]
)
plot_list <- append(plot_list, list(p))
}
subplots <- subplot(plot_list) %>%
layout(
title = title
)
return(subplots)
}
# #
# t <- data1 %>%
#   dplyr::filter(!is.na(tissue)) %>%
#   dplyr::filter(gene_symbol %in% gene_lists[[1]][['gene_list']]) %>%
#   dplyr::select(tissue, gene_symbol) %>%
#   dplyr::distinct() %>%
#   dplyr::group_by(tissue) %>%
#   dplyr::tally() %>%
#   dplyr::arrange(desc(n)) %>%
#   dplyr::slice_head(n = 10)
# t
# t <- t %>% mutate(tissue = as.character(tissue))
# p <- t  %>%
#   plot_ly(
#     type = 'bar',
#     # x = ~reorder(CLASS_TERM, n),
#     x = as.formula(paste("~", 'tissue')),
#     y = ~n,
#     name = 'whatever'
#   )
# p
# #
data2 <- read.fst('./data/panther_protein_table.fst')
getTopTenPlot(data2, gene_lists, 'SUBFAMILY_TERM', 'this is a title')
names(data1)
runApp()
## deploy_app.R
# Dependencies
library(rsconnect)
library(renv)
# Renv snapshot
renv::snapshot()
# Deploy app
rsconnect::deployApp(appName = 'morphic_gene_list')
# Dependencies
library(rsconnect)
library(renv)
# Renv snapshot
renv::snapshot()
# Deploy app
rsconnect::deployApp(appName = 'morphic_gene_list')
